// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eKorpa.Data;

namespace eKorpa.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.EntityModels.Adresa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MjestoStanovanja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OpcinaID")
                        .HasColumnType("int");

                    b.Property<int>("PostanskiBroj")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OpcinaID");

                    b.ToTable("Adresa");
                });

            modelBuilder.Entity("Data.EntityModels.Boja", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Boja");
                });

            modelBuilder.Entity("Data.EntityModels.Brend", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Brend");
                });

            modelBuilder.Entity("Data.EntityModels.Grad", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Grad");
                });

            modelBuilder.Entity("Data.EntityModels.Korpa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtikalID")
                        .HasColumnType("int");

                    b.Property<string>("KupacID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("cijena")
                        .HasColumnType("real");

                    b.Property<int>("kolicina")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ArtikalID");

                    b.HasIndex("KupacID");

                    b.ToTable("Korpa");
                });

            modelBuilder.Entity("Data.EntityModels.ListaZelja", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtikalID")
                        .HasColumnType("int");

                    b.Property<string>("KupacID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ArtikalID");

                    b.HasIndex("KupacID");

                    b.ToTable("ListaZelja");
                });

            modelBuilder.Entity("Data.EntityModels.Materijal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Materijal");
                });

            modelBuilder.Entity("Data.EntityModels.Ponuda", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAktivna")
                        .HasColumnType("bit");

                    b.Property<int>("KategorijaID")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PotkategorijaID")
                        .HasColumnType("int");

                    b.Property<float>("ProcenatSnizenja")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("KategorijaID");

                    b.HasIndex("PotkategorijaID");

                    b.ToTable("Ponuda");
                });

            modelBuilder.Entity("Data.EntityModels.Potkategorija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("KategorijaID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("KategorijaID");

                    b.ToTable("Potkategorija");
                });

            modelBuilder.Entity("Data.EntityModels.Rejting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumKupac")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumProdavac")
                        .HasColumnType("datetime2");

                    b.Property<string>("DojamKupca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DojamProdavaca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("KupacOstavioDojam")
                        .HasColumnType("bit");

                    b.Property<float>("OcjenaKupca")
                        .HasColumnType("real");

                    b.Property<float>("OcjenaProdavaca")
                        .HasColumnType("real");

                    b.Property<bool>("ProdavacOstavioDojam")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Rejting");
                });

            modelBuilder.Entity("Data.EntityModels.Slika", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtikalID")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("SlikaFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Thumbnail")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ArtikalID");

                    b.ToTable("Slika");
                });

            modelBuilder.Entity("Data.EntityModels.Velicina", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PotkategorijaID")
                        .HasColumnType("int");

                    b.Property<string>("VelicinaOznaka")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PotkategorijaID");

                    b.ToTable("Velicina");
                });

            modelBuilder.Entity("Data.EntityModels.ZavrseniArtikal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtikalID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<string>("KupacID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProdavacID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RejtingID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ArtikalID");

                    b.HasIndex("KupacID");

                    b.HasIndex("ProdavacID");

                    b.HasIndex("RejtingID");

                    b.ToTable("ZavrseniArtikal");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("eKorpa.EntityModels.Artikal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BojaID")
                        .HasColumnType("int");

                    b.Property<int>("BrendID")
                        .HasColumnType("int");

                    b.Property<int>("BrojUSkladistu")
                        .HasColumnType("int");

                    b.Property<float>("Cijena")
                        .HasColumnType("real");

                    b.Property<float>("CijenaSaPopustom")
                        .HasColumnType("real");

                    b.Property<string>("ImeProdavaca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KategorijaID")
                        .HasColumnType("int");

                    b.Property<int?>("MaterijalID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PotkategorijaID")
                        .HasColumnType("int");

                    b.Property<string>("ProdavacID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VelicinaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BojaID");

                    b.HasIndex("BrendID");

                    b.HasIndex("KategorijaID");

                    b.HasIndex("MaterijalID");

                    b.HasIndex("PotkategorijaID");

                    b.HasIndex("VelicinaID");

                    b.ToTable("Artikal");
                });

            modelBuilder.Entity("eKorpa.EntityModels.Kategorija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivKategorije")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Kategorija");
                });

            modelBuilder.Entity("eKorpa.EntityModels.Korisnik", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AdresaID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AdresaID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Data.EntityModels.Adresa", b =>
                {
                    b.HasOne("Data.EntityModels.Grad", "Opcina")
                        .WithMany()
                        .HasForeignKey("OpcinaID");
                });

            modelBuilder.Entity("Data.EntityModels.Korpa", b =>
                {
                    b.HasOne("eKorpa.EntityModels.Artikal", "Artikal")
                        .WithMany()
                        .HasForeignKey("ArtikalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKorpa.EntityModels.Korisnik", "Kupac")
                        .WithMany()
                        .HasForeignKey("KupacID");
                });

            modelBuilder.Entity("Data.EntityModels.ListaZelja", b =>
                {
                    b.HasOne("eKorpa.EntityModels.Artikal", "Artikal")
                        .WithMany()
                        .HasForeignKey("ArtikalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKorpa.EntityModels.Korisnik", "Kupac")
                        .WithMany()
                        .HasForeignKey("KupacID");
                });

            modelBuilder.Entity("Data.EntityModels.Ponuda", b =>
                {
                    b.HasOne("eKorpa.EntityModels.Kategorija", "Kategorija")
                        .WithMany()
                        .HasForeignKey("KategorijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Potkategorija", "Potkategorija")
                        .WithMany()
                        .HasForeignKey("PotkategorijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.Potkategorija", b =>
                {
                    b.HasOne("eKorpa.EntityModels.Kategorija", null)
                        .WithMany("Potkategorija")
                        .HasForeignKey("KategorijaID");
                });

            modelBuilder.Entity("Data.EntityModels.Slika", b =>
                {
                    b.HasOne("eKorpa.EntityModels.Artikal", "Artikal")
                        .WithMany()
                        .HasForeignKey("ArtikalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.Velicina", b =>
                {
                    b.HasOne("Data.EntityModels.Potkategorija", null)
                        .WithMany("Velicina")
                        .HasForeignKey("PotkategorijaID");
                });

            modelBuilder.Entity("Data.EntityModels.ZavrseniArtikal", b =>
                {
                    b.HasOne("eKorpa.EntityModels.Artikal", "Artikal")
                        .WithMany()
                        .HasForeignKey("ArtikalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKorpa.EntityModels.Korisnik", "Kupac")
                        .WithMany()
                        .HasForeignKey("KupacID");

                    b.HasOne("eKorpa.EntityModels.Korisnik", "Prodavac")
                        .WithMany()
                        .HasForeignKey("ProdavacID");

                    b.HasOne("Data.EntityModels.Rejting", "Rejting")
                        .WithMany()
                        .HasForeignKey("RejtingID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eKorpa.EntityModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eKorpa.EntityModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKorpa.EntityModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eKorpa.EntityModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKorpa.EntityModels.Artikal", b =>
                {
                    b.HasOne("Data.EntityModels.Boja", "Boja")
                        .WithMany()
                        .HasForeignKey("BojaID");

                    b.HasOne("Data.EntityModels.Brend", "Brend")
                        .WithMany()
                        .HasForeignKey("BrendID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKorpa.EntityModels.Kategorija", "Kategorija")
                        .WithMany()
                        .HasForeignKey("KategorijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Materijal", "Materijal")
                        .WithMany()
                        .HasForeignKey("MaterijalID");

                    b.HasOne("Data.EntityModels.Potkategorija", "Potkategorija")
                        .WithMany()
                        .HasForeignKey("PotkategorijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Velicina", "Velicina")
                        .WithMany()
                        .HasForeignKey("VelicinaID");
                });

            modelBuilder.Entity("eKorpa.EntityModels.Korisnik", b =>
                {
                    b.HasOne("Data.EntityModels.Adresa", "Adresa")
                        .WithMany()
                        .HasForeignKey("AdresaID");
                });
#pragma warning restore 612, 618
        }
    }
}
